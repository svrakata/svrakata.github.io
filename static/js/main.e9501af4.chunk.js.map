{"version":3,"sources":["assets/me_mountain.jpeg","assets/gr9ll01-gd-0045.png","assets/cell_back_1.gif","assets/cell_back_2.gif","assets/github.svg","assets/linkedin.svg","assets/gmail.svg","assets/cell_back_3.gif","assets/group_o_cells.png","assets/group_o_cellsxhorz.png","serviceWorker.js","Header.js","Main.js","global_styles.js","Site.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","StyledHeader","styled","header","_templateObject","Nav","nav","_templateObject2","Header","react_default","a","createElement","sizes","Title","h1","Main_templateObject","ImagesCont","div","Main_templateObject2","CellImg","img","_templateObject3","Container","_templateObject4","Avatar","_templateObject5","About","_templateObject6","ListOTech","ul","_templateObject7","Tech","li","_templateObject8","TechTheme","_templateObject9","CellSeparator","_templateObject10","props","background","Contact","_templateObject11","Main","Fragment","src","me","cell","back_cell","back_cell_1","git_hub","href","target","linked_in","g_mail","createGlobalStyle","global_styles_templateObject","Site","global_styles","src_Header","src_Main","ReactDOM","render","src_Site","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gGCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wHCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gPCdN,IAAMC,EAAeC,IAAOC,OAAVC,KAGZC,EAAMH,IAAOI,IAAVC,KAiBMC,EAZA,WAGX,OACIC,EAAAC,EAAAC,cAACV,EAAD,KACIQ,EAAAC,EAAAC,cAACN,EAAD,6xECJZ,IAAMO,EACK,QAGLC,EAAQX,IAAOY,GAAVC,KAILC,EAAad,IAAOe,IAAVC,IAKoBN,GAK9BO,EAAUjB,IAAOkB,IAAVC,IAKuBT,GAM9BU,EAAYpB,IAAOe,IAAVM,KASTC,EAAStB,IAAOkB,IAAVK,IAKwBb,GAI9Bc,EAAQxB,IAAOP,EAAVgC,KAWLC,EAAY1B,IAAO2B,GAAVC,KAOTC,EAAO7B,IAAO8B,GAAVC,KAKJC,EAAYhC,IAAO8B,GAAVG,KAOTC,EAAgBlC,IAAOe,IAAVoB,IACS,SAAAC,GAAK,OAAIA,EAAMC,aAWrCC,EAAUtC,IAAOQ,EAAV+B,IAEe,SAAAH,GAAK,OAAIA,EAAMC,YAWP3B,GAoFrB8B,EA9EF,WACT,OACEjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,SAAP,KACElC,EAAAC,EAAAC,cAACW,EAAD,KAEEb,EAAAC,EAAAC,cAACK,EAAD,KAEEP,EAAAC,EAAAC,cAACa,EAAD,CAAQoB,IAAKC,MACbpC,EAAAC,EAAAC,cAACQ,EAAD,CAASyB,IAAKE,OAIdrC,EAAAC,EAAAC,cAACE,EAAD,cAEFJ,EAAAC,EAAAC,cAACe,EAAD,yFAKAjB,EAAAC,EAAAC,cAACe,EAAD,6UAQAjB,EAAAC,EAAAC,cAACe,EAAD,gGASFjB,EAAAC,EAAAC,cAACW,EAAD,KACAb,EAAAC,EAAAC,cAACyB,EAAD,CAAeG,WAAYQ,MAGvBtC,EAAAC,EAAAC,cAACE,EAAD,eAGAJ,EAAAC,EAAAC,cAACe,EAAD,mFAEFjB,EAAAC,EAAAC,cAACiB,EAAD,KACEnB,EAAAC,EAAAC,cAACuB,EAAD,mBACAzB,EAAAC,EAAAC,cAACoB,EAAD,8BACAtB,EAAAC,EAAAC,cAACoB,EAAD,kCACAtB,EAAAC,EAAAC,cAACoB,EAAD,qDAIFtB,EAAAC,EAAAC,cAACiB,EAAD,KACEnB,EAAAC,EAAAC,cAACuB,EAAD,kBACAzB,EAAAC,EAAAC,cAACoB,EAAD,2BACAtB,EAAAC,EAAAC,cAACoB,EAAD,sBACAtB,EAAAC,EAAAC,cAACoB,EAAD,sCAMJtB,EAAAC,EAAAC,cAACW,EAAD,KACIb,EAAAC,EAAAC,cAACyB,EAAD,CAAeG,WAAYS,MAG3BvC,EAAAC,EAAAC,cAACE,EAAD,iBAEAJ,EAAAC,EAAAC,cAAC6B,EAAD,CAASD,WAAYU,IAASC,KAAK,8BAA8BC,OAAO,WACxE1C,EAAAC,EAAAC,cAAC6B,EAAD,CAASD,WAAYa,IAAWF,KAAK,sDAAsDC,OAAO,WAClG1C,EAAAC,EAAAC,cAAC6B,EAAD,CAASD,WAAYc,IAAQH,KAAK,gCAAgCC,OAAO,iRC9LtEG,kBAAfC,KCgBeC,GAbF,WACT,OACI/C,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,SAAP,KACIlC,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,QCLZC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,GAAD,MAAUC,SAASC,eAAe,SL4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9501af4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me_mountain.41e96bd3.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/gr9ll01-gd-0045.2c9affb5.png\";","module.exports = __webpack_public_path__ + \"static/media/cell_back_1.e84a4c16.gif\";","module.exports = __webpack_public_path__ + \"static/media/cell_back_2.e1139925.gif\";","module.exports = __webpack_public_path__ + \"static/media/github.617870e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.619231ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.b986b4fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/cell_back_3.6365fa45.gif\";","module.exports = __webpack_public_path__ + \"static/media/group_o_cells.0138a9b8.png\";","module.exports = __webpack_public_path__ + \"static/media/group_o_cellsxhorz.fd8d5da4.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst StyledHeader = styled.header`\n    height: 80px;\n`\nconst Nav = styled.nav`\n\n`\n\n\nconst Header = () => {\n\n\n    return (\n        <StyledHeader>\n            <Nav>\n\n            </Nav>\n        </StyledHeader>\n    )\n}\n\nexport default Header","import React from 'react'\nimport styled from 'styled-components'\nimport me from './assets/me_mountain.jpeg' \nimport cell from './assets/gr9ll01-gd-0045.png'\nimport back_cell from './assets/cell_back_1.gif'\nimport back_cell_1 from './assets/cell_back_2.gif'\nimport back_cell_2 from './assets/cell_back_3.gif'\nimport back_cell_3 from './assets/group_o_cells.png'\nimport back_cell_4 from './assets/group_o_cellsxhorz.png'\nimport git_hub from './assets/github.svg'\nimport linked_in from './assets/linkedin.svg'\nimport g_mail from './assets/gmail.svg'\n\nconst sizes = {\n    small: '460px'\n}\n\nconst Title = styled.h1`\n    margin: 60px 0;\n`\n\nconst ImagesCont = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    @media screen and (max-width: ${sizes.small}) {\n        flex-wrap: wrap;\n    }\n`\n\nconst CellImg = styled.img`\n    margin-right: 50px;\n    width: 70%;\n    max-width: 100%;\n\n    @media screen and (max-width: ${sizes.small}) {\n        margin-top: 30px;\n        width: 100%;\n    }\n`\n\nconst Container = styled.div`\n    padding: 10px;\n\n    margin: 0 auto;\n\n    max-width: 800px;\n    width: 100%;\n`\n\nconst Avatar = styled.img`\n    border-radius: 10px;\n\n    width: 30%;\n\n    @media screen and (max-width: ${sizes.small}) {\n        width: 100%;\n    }\n`\nconst About = styled.p`\n    font-size: 20px;\n    line-height: 35px;\n\n    margin-top: 20px;\n\n    &:last-child {\n        margin-bottom: 0px;\n    }\n`\n\nconst ListOTech = styled.ul`\n    list-style-type: none;\n\n    margin: 0;\n    padding: 0;\n`\n\nconst Tech = styled.li`\n    font-size: 20px;\n    margin: 10px 0;\n`\n\nconst TechTheme = styled.li`\n    font-weight: bold;\n    font-size: 20px;\n\n    margin: 20px 0;\n`\n\nconst CellSeparator = styled.div`\n    background-image: url(${props => props.background});\n    background-repeat: repeat-x;\n    background-size: 320px;\n    background-position: center;\n    border-bottom: 2px solid black;\n    border-top: 2px solid black;\n    height: 40px;\n\n    margin: 60px 0;\n`\n\nconst Contact = styled.a`\n\n    background-image: url(${props => props.background});\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: contain;\n\n    display: inline-block;\n    margin-right: 60px;\n\n    height: 80px;\n    width: 80px;\n\n    @media screen and (max-width: ${sizes.small}) {\n        margin-right: 30px;\n    }\n`\n\n \nconst Main = () => {\n    return (\n      <React.Fragment>\n        <Container>\n\n          <ImagesCont>\n\n            <Avatar src={me} />\n            <CellImg src={cell} />\n\n          </ImagesCont>\n\n            <Title>About</Title>\n\n          <About>\n            Hello. My name is Kamen. I started coding as a front-end dev at\n            Telerik Academy. \n          </About>\n\n          <About>\n            After graduating I decided to continue studying\n            and applied to Sofia University, Faculty of Mathematics and\n            Informatics and right now I'm at the end of the first year, masters bioinformatics, where my\n            sight is shifting towards the field of computational biology and\n            how to solve problems related to human health and ecology.\n          </About>\n\n          <About>\n            I love doom/stoner rock/metal and 3/4 of the year I ride around\n            the city on a bicycle.\n          </About>\n\n\n        </Container>\n\n\n        <Container>\n        <CellSeparator background={back_cell} />\n\n\n            <Title>Skills</Title>\n\n\n            <About>Technologies I'm interested in and have certain level of proficiency with:</About>\n\n          <ListOTech>\n            <TechTheme>Front-end:</TechTheme>\n            <Tech>HTML, CSS, JavaScript</Tech>\n            <Tech>SASS, Babel, Webpack, ES6</Tech>\n            <Tech>React, Redux, Styled Components, TypeScript</Tech>\n\n          </ListOTech>\n\n          <ListOTech>\n            <TechTheme>Back-end:</TechTheme>\n            <Tech>JavaScript, Python</Tech>\n            <Tech>NodeJS, Flask</Tech>\n            <Tech>MongoDB, Neo4j, Linux, Bash</Tech>\n\n          </ListOTech>\n\n        </Container>\n\n        <Container>\n            <CellSeparator background={back_cell_1} />\n\n\n            <Title>Contacts</Title>\n\n            <Contact background={git_hub} href=\"https://github.com/svrakata\" target=\"_blank\"></Contact>\n            <Contact background={linked_in} href=\"https://www.linkedin.com/in/kamen-kamenov-svrakata/\" target=\"_blank\"></Contact>\n            <Contact background={g_mail} href=\"mailto:k.kamenov.v8@gmail.com\" target=\"_top\"></Contact>\n\n        </Container>\n      </React.Fragment>\n    );\n}\n\nexport default Main","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n    body {\n        padding: 0;\n        margin: 0;\n        font-family: 'Lato', sans-serif;\n        padding-bottom: 100px;\n    }\n\n    body * {\n        box-sizing: border-box;\n    }\n`","import React from 'react'\nimport Header from './Header';\nimport Main from './Main';\nimport GlobalStyles from './global_styles'\n\nconst Site = () => {\n    return (\n        <React.Fragment>\n            <GlobalStyles />\n            <Header></Header>\n            <Main></Main>\n            \n\n\n        </React.Fragment>\n    )\n}\n\nexport default Site","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Site from './Site';\n\nReactDOM.render(<Site />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}